{"version":3,"sources":["components/PhoneBook/PhoneBook.module.css","App.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/PhoneBook/PhoneBook.js","components/Filter/Filter.js","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","state","payload","filter","item","id","_","combineReducers","axios","defaults","baseURL","getItems","contacts","getFilterValue","getFilteredContactList","createSelector","allContacts","regExp","RegExp","contact","test","name","ContactForm","number","loginInputNameId","nanoid","loginInputNamberId","hendleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","alert","onSubmit","reset","this","className","style","formContact","htmlFor","formNameTitle","formNameInput","type","pattern","title","required","onChange","button","Component","connect","dispatch","post","then","data","catch","error","addContact","ContactList","children","s","list","contactsItems","onDelete","contactID","delete","map","itemName","onClick","target","App","fetchItems","length","PhoneBook","subTitle","a","get","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a36e76df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"PhoneBook_item__1gsE4\",\"itemName\":\"PhoneBook_itemName__23iMc\",\"button\":\"PhoneBook_button__2O7ZW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"App_section__7UrLG\",\"title\":\"App_title__3zR8j\",\"subTitle\":\"App_subTitle__3Ajvl\",\"formFilter\":\"App_formFilter__2P98R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formNameTitle\":\"Filter_formNameTitle__2W-1s\",\"formNameInput\":\"Filter_formNameInput__2z1RY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2Sbm2\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactSuccess,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3001';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = ({ name, number }) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = contactID => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactID}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactID)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getItems = state => state.contacts.items;\r\n\r\nexport const getFilterValue = state => state.contacts.filter;\r\n\r\nexport const getFilteredContactList = createSelector(\r\n  [getItems, getFilterValue],\r\n  (allContacts, filter) => {\r\n    const regExp = new RegExp(filter, 'gi');\r\n\r\n    if (filter) {\r\n      return allContacts.filter(contact => regExp.test(contact.name));\r\n    }\r\n    return allContacts;\r\n  },\r\n);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact, getItems} from '../../redux/contacts';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport style from '../ContactForm/ContactForm.module.css'\n\nclass ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  loginInputNameId = nanoid();\n  loginInputNamberId = nanoid();\n\n  hendleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const addInputValue = contact =>\n      contact.name === this.state.name || contact.number === this.state.number;\n\n    if (this.props.items.some(addInputValue)) {\n      alert(`Contact is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit({ ...this.state })\n    this.reset()\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' })\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={style.formContact}>\n        <label htmlFor={this.loginInputNameId} className={style.formNameTitle}>\n          Name\n          <input\n            className={style.formNameInput}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            id={this.loginInputNameId}\n            value={name}\n            onChange={this.hendleInputChange}\n\n          />\n        </label>\n\n        <label htmlFor={this.loginInputNamberId} className={style.formNameTitle}>\n          Number\n          <input\n            className={style.formNameInput}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id={this.loginInputNamberId}\n            value={number}\n            onChange={this.hendleInputChange}\n          />\n        </label>\n\n        <button type=\"submit\" className={style.button}>Add contact</button>\n      </form>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: getItems(state),\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(addContact({ name, number })),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);","import PropTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css'\n\nconst ContactList = ({ children }) => (\n  <ul className={s.list}>{children}</ul>\n);\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default ContactList;","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact, getFilteredContactList} from '../../redux/contacts';\nimport s from './PhoneBook.module.css';\n\nconst ContactItem = ({ onDelete, contactsItems }) => (\n  <>\n    {contactsItems.map(({ id, name, number }) => {\n      return (\n        <li key={id} className={s.item}>\n          <p className={s.itemName}>{`${name}: ${number}`}</p>\n          <button type=\"button\" onClick={() => onDelete(id)} className={s.button}>\n            Delete\n          </button>\n        </li>\n      );\n    })}\n  </>\n);\n\nconst mapStateToProps = state => ({\n  contactsItems: getFilteredContactList(state),\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onDelete: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactItem);\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDelete: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { changeFilter, getFilterValue } from '../../redux/contacts';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.formNameTitle }>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} className={s.formNameInput}></input>\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilterValue(state),\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onChange: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport PhoneBook from './components/PhoneBook/PhoneBook';\nimport Filter from './components/Filter/Filter';\nimport s from './App.module.css';\n\nimport { fetchContacts } from './redux/contacts/contacts-operations';\nimport { getItems } from './redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchItems();\n  }\n  render() {\n    return (\n      <>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactForm/>\n        <h2 className={s.title}>Contacts</h2>\n  \n        {this.props.items.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList>\n              <PhoneBook />\n            </ContactList>\n          </>\n        ) : (\n            <span className={s.subTitle}>You have no contacts!</span>\n        )}\n      </>\n    )\n  }\n};\n\nconst mapStateToProps = state => ({\n  items: getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { configureStore, getDefaultMiddleware, } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport style from './index.module.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App className={style}/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContact\":\"ContactForm_formContact__1Vmew\",\"formNameTitle\":\"ContactForm_formNameTitle__-8mll\",\"formNameInput\":\"ContactForm_formNameInput__2SigX\",\"button\":\"ContactForm_button__1kuC1\"};"],"sourceRoot":""}